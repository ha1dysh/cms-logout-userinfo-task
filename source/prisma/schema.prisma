// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model User {
  id        Int       @id @default(autoincrement())
  fullName  String?
  email     String    @unique
  password  String
  role      AdminRole @default(STUFF)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Customer {
  id              Int               @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String            @unique
  password        String
  phone           String?
  note            String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  customerAddress CustomerAddress[]
  customerReviews ProductReview[]
}

model CustomerAddress {
  id         Int      @id @default(autoincrement())
  country    String
  firstName  String
  lastName   String
  company    String
  address    String
  apartment  String
  city       String
  postalCode Int
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
}

model Product {
  id             Int             @id @default(autoincrement())
  slug           String          @unique
  title          String
  description    String?
  price          Float
  quantity       Int
  compareAtPrice Float?
  costPerItem    Float?
  sku            String?
  barcode        String?
  status         ProductStatus   @default(ACTIVE)
  avgRating      Float?
  totalReviews   Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  productImages  ProductImage[]
  productReviews ProductReview[]
  category       Category        @relation(fields: [categoryId], references: [id])
  categoryId     Int
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model ProductReview {
  id         Int       @id @default(autoincrement())
  rate       Float
  review     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
  customer   Customer  @relation(fields: [customerId], references: [id])
  customerId Int
}

model Category {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  description String
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  products    Product[]
}

// Enums
enum AdminRole {
  STUFF
  ADMIN
}

enum ProductStatus {
  ACTIVE
  DRAFT
}
